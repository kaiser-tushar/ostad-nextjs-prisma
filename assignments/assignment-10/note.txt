Next.js 13 App with App Router - Folder Structure Description:

Top Level Folder and files- 

1.node_modules: Contains project dependencies installed via npm.
2.public: Holds static files served publicly (e.g., images, fonts).
3.src: Contains the main source code for the application
4.README.md: Contains important information about the project.
5.package.json and package-lock.json: Files containing project dependencies, scripts, and metadata.
6. .gitignore: Specifies files and folders ignored by Git when pushing to version control.
7.(.next)- The .next folder is a directory automatically generated by Next.js during the build process. It contains the compiled output of your Next.js application, including optimized JavaScript bundles, server-side rendering (SSR) code, and other assets. The contents of the .next folder are used to serve your application when it's deployed and accessed by users.


*** Routing with the app directory

Routing with the app directory is controlled via the folders inside of it. The UI for a particular route is defined by a page.jsx file inside of the folder.

Therefore, a folder structure that looks like app/profile/settings/page.jsx will take care of rendering the /profile/settings route.

* Loading.tsx  file - 
loading.tsx is an optional file that you can create within any directory inside of the app folder. It automatically wraps the page inside of a React suspense boundary. The component will be shown immediately on the first load as well as when you’re navigating between the sibling routes.

* error.tsx file-
error.tsx is an optional file that isolates the error to the smallest possible subsection of the app. Creating the error.tsx file automatically wraps the page inside of a React error boundary. Whenever any error occurs inside the folder where this file is placed, the component will be replaced with the contents of this component.

* layout.tsx file-
You can use the layout.tsx file to define a UI that is shared across multiple places. A layout can render another layout or a page inside of it. Whenever a route changes to any component that is within the layout, its state is preserved because the layout component is not unmounted.

* Mandatory root layout
There must be a file that defines the root layout at the top level of the app directory. This layout is applicable to all the routes in the app. In addition, the root layout must define the <html> and the <body> tags because Next.js doesn’t automatically add them.

* Server components
By default, all of the components created inside of the app directory are React server components, leading to better performance due to a smaller bundle size. But, if we want to switch to the client component, we need to specify that with the use client directive at the top of the file.

